/* tslint:disable */
/* eslint-disable */
/**
 * Topica.Server, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Topic,
} from '../models/index';
import {
    TopicFromJSON,
    TopicToJSON,
} from '../models/index';

export interface AddMessageAsyncRequest {
    topicId?: string;
    message?: string;
}

export interface DeleteMessageAsyncRequest {
    topicId?: string;
    messageId?: string;
}

export interface DeleteTopicAsyncRequest {
    topicName?: string;
}

export interface GetTopicRequest {
    id: string;
}

/**
 * 
 */
export class TopicsApi extends runtime.BaseAPI {

    /**
     */
    async addMessageAsyncRaw(requestParameters: AddMessageAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.topicId !== undefined) {
            queryParameters['topicId'] = requestParameters.topicId;
        }

        if (requestParameters.message !== undefined) {
            queryParameters['message'] = requestParameters.message;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/Topics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addMessageAsync(requestParameters: AddMessageAsyncRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addMessageAsyncRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteMessageAsyncRaw(requestParameters: DeleteMessageAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Topic>> {
        const queryParameters: any = {};

        if (requestParameters.topicId !== undefined) {
            queryParameters['topicId'] = requestParameters.topicId;
        }

        if (requestParameters.messageId !== undefined) {
            queryParameters['messageId'] = requestParameters.messageId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/Topics/message`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopicFromJSON(jsonValue));
    }

    /**
     */
    async deleteMessageAsync(requestParameters: DeleteMessageAsyncRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Topic> {
        const response = await this.deleteMessageAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTopicAsyncRaw(requestParameters: DeleteTopicAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Topic>> {
        const queryParameters: any = {};

        if (requestParameters.topicName !== undefined) {
            queryParameters['topicName'] = requestParameters.topicName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/Topics`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopicFromJSON(jsonValue));
    }

    /**
     */
    async deleteTopicAsync(requestParameters: DeleteTopicAsyncRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Topic> {
        const response = await this.deleteTopicAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCountAsyncRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Topic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/Topics/Count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopicFromJSON(jsonValue));
    }

    /**
     */
    async getCountAsync(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Topic> {
        const response = await this.getCountAsyncRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getTopicRaw(requestParameters: GetTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Topic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/Topics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopicFromJSON(jsonValue));
    }

    /**
     */
    async getTopic(requestParameters: GetTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Topic> {
        const response = await this.getTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTopicsAsyncRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Topic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/Topics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopicFromJSON(jsonValue));
    }

    /**
     */
    async getTopicsAsync(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Topic> {
        const response = await this.getTopicsAsyncRaw(initOverrides);
        return await response.value();
    }

}
