/*
Topica.Server, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

Testing TopicsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package topicaclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_topicaclient_TopicsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TopicsAPIService AddMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TopicsAPI.AddMessage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsAPIService DeleteMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicId string
		var messageId string

		httpRes, err := apiClient.TopicsAPI.DeleteMessage(context.Background(), topicId, messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsAPIService DeleteTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicId string

		httpRes, err := apiClient.TopicsAPI.DeleteTopic(context.Background(), topicId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsAPIService GetTopic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var topicId string

		resp, httpRes, err := apiClient.TopicsAPI.GetTopic(context.Background(), topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsAPIService GetTopics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TopicsAPI.GetTopics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicsAPIService GetTotal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TopicsAPI.GetTotal(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
