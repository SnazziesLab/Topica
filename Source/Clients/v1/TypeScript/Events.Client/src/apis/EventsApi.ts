/* tslint:disable */
/* eslint-disable */
/**
 * Events, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Event,
} from '../models/index';
import {
    EventFromJSON,
    EventToJSON,
} from '../models/index';

export interface DeleteEventRequest {
    id?: string;
    event?: Array<Event>;
}

export interface GetEventsRequest {
    id?: string;
}

export interface UpdateEventRequest {
    event?: Event;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     */
    async deleteEventRaw(requestParameters: DeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Events`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.event.map(EventToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     */
    async deleteEvent(requestParameters: DeleteEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.deleteEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEventsRaw(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     */
    async getEvents(requestParameters: GetEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.getEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateEventRaw(requestParameters: UpdateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Events`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventToJSON(requestParameters.event),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     */
    async updateEvent(requestParameters: UpdateEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.updateEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
