/*
Events, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Events.Client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Message type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Message{}

// Message struct for Message
type Message struct {
	DateTimeOffset time.Time `json:"dateTimeOffset"`
	Content string `json:"content"`
	EventUid NullableString `json:"eventUid,omitempty"`
}

type _Message Message

// NewMessage instantiates a new Message object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage(dateTimeOffset time.Time, content string) *Message {
	this := Message{}
	this.DateTimeOffset = dateTimeOffset
	this.Content = content
	return &this
}

// NewMessageWithDefaults instantiates a new Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageWithDefaults() *Message {
	this := Message{}
	return &this
}

// GetDateTimeOffset returns the DateTimeOffset field value
func (o *Message) GetDateTimeOffset() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateTimeOffset
}

// GetDateTimeOffsetOk returns a tuple with the DateTimeOffset field value
// and a boolean to check if the value has been set.
func (o *Message) GetDateTimeOffsetOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateTimeOffset, true
}

// SetDateTimeOffset sets field value
func (o *Message) SetDateTimeOffset(v time.Time) {
	o.DateTimeOffset = v
}

// GetContent returns the Content field value
func (o *Message) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Message) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Message) SetContent(v string) {
	o.Content = v
}

// GetEventUid returns the EventUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Message) GetEventUid() string {
	if o == nil || IsNil(o.EventUid.Get()) {
		var ret string
		return ret
	}
	return *o.EventUid.Get()
}

// GetEventUidOk returns a tuple with the EventUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Message) GetEventUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventUid.Get(), o.EventUid.IsSet()
}

// HasEventUid returns a boolean if a field has been set.
func (o *Message) HasEventUid() bool {
	if o != nil && o.EventUid.IsSet() {
		return true
	}

	return false
}

// SetEventUid gets a reference to the given NullableString and assigns it to the EventUid field.
func (o *Message) SetEventUid(v string) {
	o.EventUid.Set(&v)
}
// SetEventUidNil sets the value for EventUid to be an explicit nil
func (o *Message) SetEventUidNil() {
	o.EventUid.Set(nil)
}

// UnsetEventUid ensures that no value is present for EventUid, not even an explicit nil
func (o *Message) UnsetEventUid() {
	o.EventUid.Unset()
}

func (o Message) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dateTimeOffset"] = o.DateTimeOffset
	toSerialize["content"] = o.Content
	if o.EventUid.IsSet() {
		toSerialize["eventUid"] = o.EventUid.Get()
	}
	return toSerialize, nil
}

func (o *Message) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dateTimeOffset",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessage := _Message{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessage)

	if err != nil {
		return err
	}

	*o = Message(varMessage)

	return err
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


